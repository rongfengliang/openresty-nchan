user root; 
master_process off;
worker_processes 1;
events {
    worker_connections  1024;
}
http {
    upstream my_redis_server {
        nchan_redis_server redis;
    }
    include       mime.types;
    default_type  text/html;
    lua_code_cache off;
    lua_package_path '/opt/lua/?.lua;;';
    real_ip_header     X-Forwarded-For;
    resolver 127.0.0.11;
    server {
       listen 80;
       charset utf-8;
       proxy_set_header X-Forwarded-For $remote_addr;
       proxy_buffering off;
       proxy_cache off;
       proxy_set_header Connection '';
       proxy_http_version 1.1;
       chunked_transfer_encoding off;
       default_type text/html;
       
       location ~ /redis_sub/(\w+)$ {
            access_by_lua_block {
               local cjson = require("cjson")
               ngx.log(ngx.ERR, "failed to get the SNI name: ", cjson.encode(ngx.var))
            }
            nchan_subscriber_first_message newest;
            nchan_subscriber;
            nchan_subscribe_request /upstream/sub;
            nchan_unsubscribe_request /upstream/unsub;
            nchan_channel_id $1;
            nchan_redis_pass my_redis_server;
        }
        location = /upstream/unsub {
            proxy_pass http://benthos:4195/msg;
            proxy_ignore_client_abort on;  #!!!important!!!!
            proxy_set_header X-Subscriber-Type $nchan_subscriber_type;
            proxy_set_header X-Channel-Id $nchan_channel_id;
            proxy_set_header X-Original-URI $request_uri;
        } 
        location = /upstream/sub {
            proxy_pass http://benthos:4195/msg;
            proxy_set_header X-Subscriber-Type $nchan_subscriber_type;
            proxy_set_header X-Message-Id $nchan_message_id;
            proxy_set_header X-Channel-Id $nchan_channel_id;
            proxy_set_header X-Original-URI $request_uri;
        }
        location = /upstream_pub {
            proxy_pass http://benthos:4195/msg;
            proxy_set_header X-Subscriber-Type $nchan_subscriber_type;
            proxy_set_header X-Message-Id $nchan_message_id;
            proxy_set_header X-Channel-Id $nchan_channel_id;
            proxy_set_header X-Original-URI $request_uri;
        }
        location ~ /redis_pub/(\w+)$ {
            nchan_redis_pass my_redis_server;
            nchan_publisher;
            nchan_publisher_upstream_request /upstream_pub;
            nchan_channel_id $1;
        }
    }
}